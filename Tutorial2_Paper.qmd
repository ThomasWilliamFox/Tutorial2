---
title: "Tutorial2"
format: pdf
editor: visual
---

```{r}
#| echo: false
#| include: false
#| warning: false
#| message: false

#### Preamble ####
# Purpose: Collect, clean, and present opendatatoronto data set
# Author: Thomas Fox
# Email: thomas.fox@mail.utoronto.ca
# Date: 16 January 2024
# Prerequisites: 

#### Workspace setup ####

library(janitor)
library(opendatatoronto)
library(tidyverse)
library(dplyr)
library(knitr)

```


```{r}
# Acquire data from opendatatoronto according to "For Developers" instructions
# get package
package <- show_package("c5e2fdc6-9190-4205-bc04-0c3ce265d005")
package
 
# get all resources for this package
resources <- list_package_resources("c5e2fdc6-9190-4205-bc04-0c3ce265d005")
 
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
 
# load the first datastore resource as a sample
toronto_library_comp_usage <- filter(datastore_resources, row_number()==1) %>% get_resource()
toronto_library_comp_usage

head(toronto_library_comp_usage)
write_csv(
  x = toronto_library_comp_usage,
  file = "toronto_library_comp_usage.csv"
)
```

```{r}
# Filter Data

names(toronto_library_comp_usage)

cleaned_toronto_library_comp_usage <-
  clean_names(toronto_library_comp_usage) |>
  select(year, sessions) |>
  mutate (sessions = as.integer(sessions))

head(cleaned_toronto_library_comp_usage)

write_csv(
  x = cleaned_toronto_library_comp_usage,
  file = "cleaned_toronto_library_permits.csv"
)
```

```{r}
cleaned_toronto_library_comp_usage <-
  cleaned_toronto_library_comp_usage |>
    summarise(total_sessions = mean(sessions),
            .by = year) 
head(cleaned_toronto_library_comp_usage)
```

```{r}
cleaned_toronto_library_comp_usage |>
  ggplot(aes(x = year, y = total_sessions)) +
  geom_bar(stat = "identity") +
  theme_minimal() + # Make the theme neater
  labs(x = "Party", y = "Avg Sessions Per Branch") # Make labels more meaningful
```



